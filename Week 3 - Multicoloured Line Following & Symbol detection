from picamera2 import Picamera2
import cv2
import numpy as np
import RPi.GPIO as GPIO
import os
import time
import math

# Initialize camera
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"format": 'RGB888', "size": (640, 480)})
picam2.configure(config)
picam2.set_controls({"AwbMode": 0})  # Manual white balance
picam2.set_controls({"ColourGains": (1.5, 1.5)})
picam2.start()

# Motor GPIO setup
motor_in1 = 17
motor_in2 = 18
motor_in3 = 22
motor_in4 = 23
ENA = 12
ENB = 13

GPIO.setmode(GPIO.BCM)
GPIO.setup([motor_in1, motor_in2, motor_in3, motor_in4, ENA, ENB], GPIO.OUT)

# Initialize PWM with error handling
try:
    pwm1 = GPIO.PWM(ENA, 1000)
    pwm2 = GPIO.PWM(ENB, 1000)
    pwm1.start(0)
    pwm2.start(0)
except Exception as e:
    print(f"Error initializing PWM: {e}")
    pwm1 = None
    pwm2 = None

def set_speed(speed):
    if pwm1 is not None and pwm2 is not None:
        try:
            pwm1.ChangeDutyCycle(speed)
            pwm2.ChangeDutyCycle(speed)
        except Exception as e:
            print(f"Error setting PWM speed: {e}")

def move_left():
    if not color_change_detected:
        GPIO.output(motor_in1, GPIO.LOW)
        GPIO.output(motor_in2, GPIO.HIGH)
        GPIO.output(motor_in3, GPIO.HIGH)
        GPIO.output(motor_in4, GPIO.LOW)
        pwm1.ChangeDutyCycle(85)
        pwm2.ChangeDutyCycle(35)
        print("Turning Left")

def move_right():
    if not color_change_detected:
        GPIO.output(motor_in1, GPIO.HIGH)
        GPIO.output(motor_in2, GPIO.LOW)
        GPIO.output(motor_in3, GPIO.LOW)
        GPIO.output(motor_in4, GPIO.HIGH)
        pwm1.ChangeDutyCycle(35)
        pwm2.ChangeDutyCycle(85)
        print("Turning Right")

def move_forward():
    if not color_change_detected:
        GPIO.output(motor_in1, GPIO.HIGH)
        GPIO.output(motor_in2, GPIO.LOW)
        GPIO.output(motor_in3, GPIO.HIGH)
        GPIO.output(motor_in4, GPIO.LOW)
        set_speed(27)
        print("Moving Forward")

def move_backward():
    if not color_change_detected:
        set_speed(50)
        GPIO.output(motor_in1, GPIO.LOW)
        GPIO.output(motor_in2, GPIO.HIGH)
        GPIO.output(motor_in3, GPIO.LOW)
        GPIO.output(motor_in4, GPIO.HIGH)
        print("Moving Backward Slowly")

def stop():
    set_speed(0)
    GPIO.output(motor_in1, GPIO.LOW)
    GPIO.output(motor_in2, GPIO.LOW)
    GPIO.output(motor_in3, GPIO.LOW)
    GPIO.output(motor_in4, GPIO.LOW)
    print("Stopping")

# HSV color ranges
color_ranges = {
    "yellow": ([18, 80, 80], [40, 255, 255]),
    "dark_blue": ([100, 150, 50], [130, 255, 255]),
    "white": ([0, 0, 180], [180, 50, 255]),
    "red1": ([0, 120, 70], [10, 255, 255]),
    "red2": ([170, 120, 70], [180, 255, 255]),
    "green": ([30, 40, 40], [100, 255, 255]),
}

# HSV bounds for arrow detection (blue arrows)
arrow_minHSV = np.array([100, 100, 50])
arrow_maxHSV = np.array([140, 255, 255])

# Corrected color_display with RGB tuples
color_display = {
    "yellow": (0, 255, 255),
    "dark_blue": (255, 0, 0),
    "red1": (0, 0, 255),
    "red2": (0, 0, 255),
    "green": (0, 255, 0),
    "black": (50, 50, 50),
}

def detect_shape(cnt, frame, hsv_frame):
    shape = "unknown"
    peri = cv2.arcLength(cnt, True)
    area = cv2.contourArea(cnt)
    
    if shape == "unknown":
        stop()
        time.sleep(3)
    
    if area < 500 or len(cnt) < 3:
        return shape

    epsilon = 0.03 * peri if area > 1000 else 0.05 * peri
    approx = cv2.approxPolyDP(cnt, epsilon, True)
    num_vertices = len(approx)
    
    # Check for arrow specifically if it's blue
    if 4 <= num_vertices <= 8:
        maskHSV = cv2.inRange(hsv_frame, arrow_minHSV, arrow_maxHSV)
        # ADDED EROSION HERE
        kernel = np.ones((3, 3), np.uint8)
        maskHSV = cv2.erode(maskHSV, kernel, iterations=1)
        # END EROSION
        kernel = np.ones((5, 5), np.uint8)
        maskHSV = cv2.morphologyEx(maskHSV, cv2.MORPH_CLOSE, kernel)
        maskHSV = cv2.morphologyEx(maskHSV, cv2.MORPH_OPEN, np.ones((3, 3), np.uint8))

        x, y, w, h = cv2.boundingRect(cnt)
        x, y = max(x - 10, 0), max(y - 10, 0)
        w = min(w + 20, frame.shape[1] - x)
        h = min(h + 20, frame.shape[0] - y)
        arrow_region = maskHSV[y:y + h, x:x + w]
        
        if arrow_region.size > 0:
            blurIm = cv2.GaussianBlur(arrow_region, (9, 9), 0)
            corners = cv2.goodFeaturesToTrack(blurIm, 2, 0.7, 15)

            if corners is not None and len(corners) >= 2:
                corners = np.int0(corners)
                x0, y0 = corners[0].ravel()
                x1, y1 = corners[1].ravel()
                x0, y0 = x0 + x, y0 + y
                x1, y1 = x1 + x, y1 + y

                cv2.circle(frame, (x0, y0), 5, (0, 0, 255), -1)
                cv2.circle(frame, (x1, y1), 5, (0, 0, 255), -1)

                am, bm = (x0 + x1) / 2, (y0 + y1) / 2
                cv2.circle(frame, (int(am), int(bm)), 3, (255, 0, 0), -1)

                (cx, cy), radius = cv2.minEnclosingCircle(cnt)
                cv2.circle(frame, (int(cx), int(cy)), int(radius), (0, 0, 255), 2)
                cv2.line(frame, (int(cx), int(cy)), (int(am), int(bm)), (255, 0, 0), 2)

                angle = math.degrees(math.atan2(bm - cy, am - cx))
                if -45 <= angle < 45:
                    return "arrow (right)"
                elif 45 <= angle < 135:
                    return "arrow (down)"
                elif -180 <= angle <= -135 or 135 <= angle <= 180:
                    return "arrow (left)"
                elif -135 < angle < -45:
                    return "arrow (up)"

    return shape

print("Press 'q' to exit.")

last_detected_color = None
last_detection_time = time.time()
final_shape_text = "-----"
shape_counter = 0
color_change_detected = False

try:
    while True:
        frame = picam2.capture_array()
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        roi = hsv[360:480, :]

        direction = None
        detected = False
        box_color = (255, 255, 255)  # Default white
        x, y, w, h, line_center, cy = None, None, None, None, None, None

        if not color_change_detected:
            # Line following logic
            for color in ["yellow", "green"]:
                lower = np.array(color_ranges[color][0])
                upper = np.array(color_ranges[color][1])
                mask = cv2.inRange(roi, lower, upper)
                # ADDED EROSION HERE
                kernel = np.ones((3, 3), np.uint8)
                mask = cv2.erode(mask, kernel, iterations=1)
                # END EROSION
                color_name = color

                contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                contours = [cnt for cnt in contours if cv2.contourArea(cnt) > 500]

                if contours:
                    contours = sorted(contours, key=lambda c: cv2.boundingRect(c)[1] + cv2.boundingRect(c)[3], reverse=True)
                    largest = contours[0]
                    x, y, w, h = cv2.boundingRect(largest)
                    M = cv2.moments(largest)
                    if M["m00"] > 0:
                        cx = int(M["m10"] / M["m00"])
                        cy = int(M["m01"] / M["m00"])
                        line_center = cx
                    else:
                        line_center = x + w // 2
                        cy = y + h // 2

                    # Check for sudden color change
                    if last_detected_color is not None and last_detected_color != color_name and time.time() - last_detection_time > 0.2:
                        print(f"Color changed from {last_detected_color} to {color_name}. Stopping.")
                        stop()
                        color_change_detected = True
                        break

                    last_detected_color = color_name
                    last_detection_time = time.time()

                    frame_center = mask.shape[1] // 2
                    if line_center < frame_center - 100:
                        move_right()
                        direction = f"{color_name} - Turn right"
                    elif line_center > frame_center + 100:
                        move_left()
                        direction = f"{color_name} - Turn left"
                    else:
                        move_forward()
                        direction = f"{color_name} - Go Straight"

                    detected = True
                    box_color = color_display.get(color_name, (255, 255, 255))
                    print(f"Line detected: {direction}")
                    break

            if not detected and not color_change_detected:
                roi_color = frame[360:480, :]
                hsv_roi = cv2.cvtColor(roi_color, cv2.COLOR_BGR2HSV)

                red_mask1 = cv2.inRange(hsv_roi, np.array(color_ranges["red1"][0]), np.array(color_ranges["red1"][1]))
                red_mask2 = cv2.inRange(hsv_roi, np.array(color_ranges["red2"][0]), np.array(color_ranges["red2"][1]))
                green_mask = cv2.inRange(hsv_roi, np.array(color_ranges["green"][0]), np.array(color_ranges["green"][1]))
                # ADDED EROSION HERE
                kernel = np.ones((3, 3), np.uint8)
                red_mask1 = cv2.erode(red_mask1, kernel, iterations=1)
                red_mask2 = cv2.erode(red_mask2, kernel, iterations=1)
                green_mask = cv2.erode(green_mask, kernel, iterations=1)
                # END EROSION

                combined_mask = cv2.bitwise_or(red_mask1, red_mask2)
                combined_mask = cv2.bitwise_or(combined_mask, green_mask)

                roi_masked = roi_color.copy()
                roi_masked[combined_mask > 0] = (255, 255, 255)

                gray = cv2.cvtColor(roi_masked, cv2.COLOR_BGR2GRAY)
                _, threshold = cv2.threshold(gray, 100, 255, cv2.THRESH_BINARY_INV)
                contours, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                contours = [cnt for cnt in contours if cv2.contourArea(cnt) > 500]

                if contours:
                    largest = max(contours, key=cv2.contourArea)
                    x, y, w, h = cv2.boundingRect(largest)
                    M = cv2.moments(largest)
                    if M["m00"] > 0:
                        cx = int(M["m10"] / M["m00"])
                        cy = int(M["m01"] / M["m00"])
                        line_center = cx
                    else:
                        line_center = x + w // 2
                        cy = y + h // 2

                    # Check for color change to black
                    if last_detected_color is not None and last_detected_color != "black" and time.time() - last_detection_time > 0.2:
                        print(f"Color changed to black. Stopping.")
                        stop()
                        color_change_detected = True
                    else:
                        last_detected_color = "black"
                        last_detection_time = time.time()

                        frame_center = threshold.shape[1] // 2
                        if line_center < frame_center - 90:
                            move_right()
                            direction = "black - Turn Right"
                        elif line_center > frame_center + 90:
                            move_left()
                            direction = "black - Turn Left"
                        else:
                            move_forward()
                            direction = "black - Go Straight"

                        box_color = color_display.get("black", (255, 255, 255))
                        print(f"Line detected: {direction}")
                else:
                    move_backward()
                    direction = "No Line"
                    print(f"Line detected: {direction}")

        # Arrow detection (always runs, no motor commands after color change)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, (7, 7), 0)
        thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
        edges = cv2.Canny(thresh, 120, 100)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        arrow_detected = False
        for cnt in contours:
            if cv2.contourArea(cnt) > 500:
                shape = detect_shape(cnt, frame, hsv)
                # Shape persistence logic
                shape_text = shape if shape.startswith("arrow") else shape
                if final_shape_text != shape_text:
                    shape_counter += 1
                else:
                    shape_counter = 0
                if shape_counter >= 5:
                    final_shape_text = shape_text

                if shape.startswith("arrow"):
                    arrow_detected = True
                    direction = f"Arrow - {shape}"
                    print(f"Arrow detected: {shape}")
                    move_forward()
                    time.sleep(2)

                cv2.drawContours(frame, [cnt], -1, (0, 0, 255), 2)
                M = cv2.moments(cnt)
                if M["m00"] != 0:
                    cX = int(M["m10"] / M["m00"])
                    cY = int(M["m01"] / M["m00"])
                    cv2.putText(frame, final_shape_text, (cX, cY), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

        if not arrow_detected:
            print("No arrow detected")

        # Display frame
        if "DISPLAY" in os.environ:
            display_frame = frame.copy()
            if not color_change_detected and detected and all(v is not None for v in [x, y, w, h, line_center, cy]):
                try:
                    cv2.rectangle(display_frame, (x, y + 360), (x + w, y + h + 360), box_color, 2)
                    cv2.circle(display_frame, (line_center, cy + 360), 5, (0, 0, 255), -1)
                    cv2.putText(display_frame, direction or "No Direction", (30, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, box_color, 2)
                except Exception as e:
                    print(f"Error drawing rectangle or circle: {e}")
            elif direction:
                cv2.putText(display_frame, direction or "No Direction", (30, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            cv2.imshow("Line Following", display_frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("Interrupted!")

finally:
    stop()
    if pwm1 is not None:
        try:
            pwm1.stop()
        except Exception as e:
            print(f"Error stopping pwm1: {e}")
    if pwm2 is not None:
        try:
            pwm2.stop()
        except Exception as e:
            print(f"Error stopping pwm2: {e}")
    cv2.destroyAllWindows()
    picam2.stop()
    try:
        GPIO.cleanup()
    except Exception as e:
        print(f"Error during GPIO cleanup: {e}")
